import java.text.SimpleDateFormat

defaultTasks 'helloWorld'

task('helloWorld').doFirst {
    println "HelloWorld"
}

println "Scripts written outside of a task will executed first hand!"

task('runJavaCode').doLast {

    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
    sdf.setTimeZone(TimeZone.getTimeZone("UTC"))
    System.out.println("Java code also works!");
    System.out.println "Current time is:" + sdf.format(new Date()) // Braces and semicolon are optional
    sayHelloWorld()
}

sayHelloWorld() // You can invoke the method from anywhere - before or after method declaration.
//inline java code example
void sayHelloWorld() {
    println "Inline Java method";
}

sayHelloWorld()

int multiplyInt(int i) {
    println("Input i=" + i)
    i * 3 // 'return' keyword is optional
    //def y = i + 10; // try this
}

task("returnKeyword").doFirst {
    println multiplyInt(2)
    // println multiplyInt("some string") // This will fail as Groovy is Type safe
}

task("payWithStrings").doFirst {
    def s1 = "a string"
    println s1
    def s2 = 'a string'
    println s2

    def s3 = """ A
string 
on 
mltiple
lines
    with indentation preserved 
    yes, you need three double quotes (\"\"\") """
    println s3

    //String interpolation
    def x = 4
    println "Value of x is $x"

    def myCourse = "gradle"
    println "Add some code in String: ${myCourse.toUpperCase()}" //Note: This will not work with single quote
}

class Person {
    String name
    Integer age

    Person(name, age) {
        this.name = name
        this.age = age
    }
    // Getters and Setters in Groovy automatically created.
}

task("settingProperties").doFirst {
    def person = new Person("Tom", 30)
    println person.name + ", " + person.age
    person.age = 31
    println person.name + ", " + person.age

    Map map = new HashMap()

    // In Java
    map.put("one", 1)
    map.put("two", 2)
    println map.get("one") + ", " + map.get("two")

    // In Groovy
    map.three = 3
    map.four = 4
    println map.three + ", " + map.four
}

// Important part of Groovy in Gradle
task("doTheClosure").doFirst {
    def echoIt = {}
    println echoIt() // With () you are actually evaluating the code inside the closure
    println echoIt // Without () you are actually calling a toString() method on that closure

    def echoThis = {
        println "Hello World!"
        123 // Closure returns the value on the last statement
    }
    println echoThis()
    println echoThis


    def echoMyParameter = { myParam ->
        println myParam
    }
    println echoMyParameter("Hello World! as parameter")

    def echoItParameter = {
        println it
    }
    println echoItParameter("It is a default parameter!")

    def echoMultiParameter = { a, b, c, d ->
        println a
        println b
        println c
        println d
    }
    println echoMultiParameter("Multi-parameter", "are", "also", "possibe")
}

task("AdvanceClosure").doFirst {
    // Pass closures as parameters
    println oneArgMethod({ 10 }) // Parentheses are option
    println twoArgMethod(2, { 10 })
    println oneArgMethod({
        def y = 5
        y * 2
    }) // Passing multiline closure

    // Common uses for closure... iterators in Java!
    for (int j in [1, 2, 3]) {
        println j
    }

    // Common uses for closure... iterators in Groovy!
    [1, 2, 3].each {
        println it // 'it is a default parameter in Groovy
    }

    // Closure Resolution
    def emp = new Employee()
    emp.nameSayer()

    def theName = "John"
    def sayName = {
        println theName
    }
    sayName()
    theName = "Bill"
    sayName()

    // THIS IS NOT WORKING
    // Dynamic code block - as a Labmda function
    def emp2 = new Employee()
    def closure = { name.toUpperCase() }
    closure.delegate = emp2
    assert closure() == "FRED"
}

// Pass closures as parameter
def oneArgMethod(closure) {
    closure() * 2
}

// Pass closures as parameter
def twoArgMethod(factor, closure) {
    closure() * factor
}

class Employee {
    String name = "Fred"

    def nameSayer = {
        println name
    }
}